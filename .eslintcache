[{"C:\\SocialNetwork\\Network\\src\\App.tsx":"1","C:\\SocialNetwork\\Network\\src\\Components\\Navbar\\Navbar.tsx":"2","C:\\SocialNetwork\\Network\\src\\Components\\Profile\\MyPosts\\MyPosts.tsx":"3","C:\\SocialNetwork\\Network\\src\\Components\\Profile\\Profile.tsx":"4","C:\\SocialNetwork\\Network\\src\\index.tsx":"5","C:\\SocialNetwork\\Network\\src\\Components\\Profile\\MyPosts\\Post\\Posts.tsx":"6","C:\\SocialNetwork\\Network\\src\\Components\\Dialogs\\Dialogs.tsx":"7","C:\\SocialNetwork\\Network\\src\\reportWebVitals.ts":"8","C:\\SocialNetwork\\Network\\src\\Components\\Dialogs\\Dialog\\Dialog.tsx":"9","C:\\SocialNetwork\\Network\\src\\Components\\Dialogs\\Message\\Message.tsx":"10","C:\\SocialNetwork\\Network\\src\\Components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"11","C:\\SocialNetwork\\Network\\src\\Components\\Redux\\State.tsx":"12","C:\\SocialNetwork\\Network\\src\\Components\\Header\\Header.tsx":"13","C:\\SocialNetwork\\Network\\src\\Components\\Redux\\dialogReducer.tsx":"14","C:\\SocialNetwork\\Network\\src\\Components\\Redux\\profileReducer.tsx":"15","C:\\SocialNetwork\\Network\\src\\Components\\Redux\\redux-store.tsx":"16","C:\\SocialNetwork\\Network\\src\\Components\\Dialogs\\DialogsContainer.tsx":"17","C:\\SocialNetwork\\Network\\src\\Components\\Profile\\MyPosts\\MyPostContainer.tsx":"18","C:\\SocialNetwork\\Network\\src\\Components\\Redux\\userReduser.tsx":"19","C:\\SocialNetwork\\Network\\src\\Components\\Users\\userContainer.tsx":"20","C:\\SocialNetwork\\Network\\src\\Components\\Users\\Users.tsx":"21","C:\\SocialNetwork\\Network\\src\\Components\\Common\\Preloader\\Preloader.tsx":"22","C:\\SocialNetwork\\Network\\src\\Components\\Profile\\ProfileContainer.tsx":"23","C:\\SocialNetwork\\Network\\src\\Components\\Redux\\auth-Reducer.tsx":"24","C:\\SocialNetwork\\Network\\src\\Components\\Header\\HeaderContainer.tsx":"25"},{"size":1083,"mtime":1614225510110,"results":"26","hashOfConfig":"27"},{"size":916,"mtime":1614048244610,"results":"28","hashOfConfig":"27"},{"size":1233,"mtime":1611333263709,"results":"29","hashOfConfig":"27"},{"size":460,"mtime":1614069431843,"results":"30","hashOfConfig":"27"},{"size":321,"mtime":1611387862682,"results":"31","hashOfConfig":"27"},{"size":508,"mtime":1609014789405,"results":"32","hashOfConfig":"27"},{"size":1398,"mtime":1610603226397,"results":"33","hashOfConfig":"27"},{"size":425,"mtime":1606123191738,"results":"34","hashOfConfig":"27"},{"size":350,"mtime":1609583310028,"results":"35","hashOfConfig":"27"},{"size":194,"mtime":1609593623262,"results":"36","hashOfConfig":"27"},{"size":712,"mtime":1614074944766,"results":"37","hashOfConfig":"27"},{"size":3221,"mtime":1610426635375,"results":"38","hashOfConfig":"27"},{"size":766,"mtime":1614244151017,"results":"39","hashOfConfig":"27"},{"size":1451,"mtime":1614062318191,"results":"40","hashOfConfig":"27"},{"size":1965,"mtime":1614237829927,"results":"41","hashOfConfig":"27"},{"size":416,"mtime":1614069514733,"results":"42","hashOfConfig":"27"},{"size":1456,"mtime":1611327996868,"results":"43","hashOfConfig":"27"},{"size":1294,"mtime":1614209203241,"results":"44","hashOfConfig":"27"},{"size":3271,"mtime":1613927715918,"results":"45","hashOfConfig":"27"},{"size":3278,"mtime":1613927926515,"results":"46","hashOfConfig":"27"},{"size":2351,"mtime":1614048686538,"results":"47","hashOfConfig":"27"},{"size":411,"mtime":1613923145900,"results":"48","hashOfConfig":"27"},{"size":1974,"mtime":1614225663027,"results":"49","hashOfConfig":"27"},{"size":1197,"mtime":1614242599509,"results":"50","hashOfConfig":"27"},{"size":1330,"mtime":1614242817404,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1btcow1",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"86"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"69"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"103"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\SocialNetwork\\Network\\src\\App.tsx",["115"],"C:\\SocialNetwork\\Network\\src\\Components\\Navbar\\Navbar.tsx",[],["116","117"],"C:\\SocialNetwork\\Network\\src\\Components\\Profile\\MyPosts\\MyPosts.tsx",[],["118","119"],"C:\\SocialNetwork\\Network\\src\\Components\\Profile\\Profile.tsx",[],"C:\\SocialNetwork\\Network\\src\\index.tsx",[],["120","121"],"C:\\SocialNetwork\\Network\\src\\Components\\Profile\\MyPosts\\Post\\Posts.tsx",[],"C:\\SocialNetwork\\Network\\src\\Components\\Dialogs\\Dialogs.tsx",[],["122","123"],"C:\\SocialNetwork\\Network\\src\\reportWebVitals.ts",[],"C:\\SocialNetwork\\Network\\src\\Components\\Dialogs\\Dialog\\Dialog.tsx",[],["124","125"],"C:\\SocialNetwork\\Network\\src\\Components\\Dialogs\\Message\\Message.tsx",[],["126","127"],"C:\\SocialNetwork\\Network\\src\\Components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["128"],"C:\\SocialNetwork\\Network\\src\\Components\\Redux\\State.tsx",["129"],"C:\\SocialNetwork\\Network\\src\\Components\\Header\\Header.tsx",["130","131","132"],"C:\\SocialNetwork\\Network\\src\\Components\\Redux\\dialogReducer.tsx",[],["133","134"],"C:\\SocialNetwork\\Network\\src\\Components\\Redux\\profileReducer.tsx",[],"C:\\SocialNetwork\\Network\\src\\Components\\Redux\\redux-store.tsx",[],"C:\\SocialNetwork\\Network\\src\\Components\\Dialogs\\DialogsContainer.tsx",["135"],"import React from \"react\";\r\nimport {addMessageAC, changeMessageTextAC} from \"../Redux/dialogReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {DialogType, DispatchAddMessageType, DispatchChangeMessageType, MessageType, StateType} from \"../Redux/State\";\r\nimport {connect} from \"react-redux\";\r\ntype AddMessagesType = (addMessageAC: DispatchAddMessageType) => void\r\ntype ChangeMessagesType = (changeMessageTextAC: DispatchChangeMessageType) => void\r\ntype allDispatchDialogType = AddMessagesType & ChangeMessagesType\r\n\r\ntype MapDispatchToPropsType = {\r\n    addMessage: () => void\r\n    changeMessageText: (text: string) => void\r\n}\r\ntype MapStateToPropsType = {\r\n    dialogs:  Array<DialogType>\r\n    messages: Array<MessageType>\r\n    newMessageText: string\r\n\r\n}\r\nconst mapStateToProps = (state:StateType ): MapStateToPropsType => {\r\n    return{\r\n        dialogs: state.dialogPage.dialogData,\r\n        messages: state.dialogPage.messageData,\r\n        newMessageText: state.dialogPage.newMessageText,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: allDispatchDialogType ): MapDispatchToPropsType => {\r\n    return{\r\n        addMessage: () => {\r\n            dispatch(addMessageAC())\r\n        },\r\n        changeMessageText: (text: string) => {\r\n            dispatch(changeMessageTextAC(text))\r\n        }\r\n    }\r\n}\r\nexport const DialogContainer = connect<MapStateToPropsType,MapDispatchToPropsType, {}, StateType>(mapStateToProps, mapDispatchToProps)(Dialogs);\r\n\r\n","C:\\SocialNetwork\\Network\\src\\Components\\Profile\\MyPosts\\MyPostContainer.tsx",["136"],"import React from \"react\";\r\nimport {addPostAC, changePostTextAC, DispatchAddPostType, DispatchChangePostType} from \"../../Redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {PostType, StateType} from \"../../Redux/State\";\r\n\r\ntype dispatchAddPostType = (addPostAC: DispatchAddPostType) => void\r\ntype dispatchUpdateNewPostType = (changePostTextAC:  DispatchChangePostType) => void\r\ntype dispatchAllType = dispatchAddPostType & dispatchUpdateNewPostType\r\ntype MapDispatchToPropsType = {\r\n    updateNewPostText: (text: string) => void\r\n    addPost: () => void\r\n}\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostType>\r\n    newPost: string\r\n}\r\n\r\nconst mapStateToProps = (state: StateType):MapStateToPropsType => {\r\nreturn {\r\n    posts: state.profilePage.postData,\r\n    newPost: state.profilePage.newPost\r\n}\r\n}\r\nconst mapDispatchToProps = (dispatch: dispatchAllType):MapDispatchToPropsType => {\r\n    return{\r\n        updateNewPostText:  (text: string) => {\r\n            dispatch(changePostTextAC(text))\r\n        },\r\n        addPost: () => {\r\n            dispatch(addPostAC())\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const PostContainer = connect<MapStateToPropsType,MapDispatchToPropsType, {}, StateType >(mapStateToProps, mapDispatchToProps)(MyPosts)","C:\\SocialNetwork\\Network\\src\\Components\\Redux\\userReduser.tsx",["137","138"],"\r\nexport type UsersType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n}\r\nexport type UserType = {\r\n    id: number\r\n    followed: boolean,\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n    photos: string\r\n}\r\ntype LocationType = {\r\n    city: string\r\n    country: string\r\n}\r\nlet initialState: UsersType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true\r\n}\r\nexport const userReducer = (state = initialState, action:UserReducerActionType) => {\r\n    switch (action.type) {\r\n\r\n        case 'FOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if(user.id === action.userID){\r\n                        return {...user, followed: true}\r\n                    }\r\n                    return user\r\n                } )\r\n            }\r\n        break;\r\n        }\r\n        case 'UNFOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if(user.id === action.userID){\r\n                        return{...user, followed: false}\r\n                    }\r\n                    return user\r\n                })\r\n            }\r\n\r\n        break;\r\n        }\r\n        case 'USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'SET_CURRENT_PAGE':{\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case \"SET_TOTAL_USER_COUNT\":{\r\n            return {...state, totalUsersCount: action.pageNumber}\r\n        }\r\n        case \"TOGGLE_IS_FETCHING\":{\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n\r\n        default :{\r\n                return state\r\n            }\r\n    }\r\n}\r\nexport const setCurrentPage = (currentPage: number):SetCurrentPageACType => {\r\n    return {type: 'SET_CURRENT_PAGE', currentPage: currentPage}\r\n}\r\nexport const follow = (userID: number):FollowACType => {\r\n    return{type: 'FOLLOW', userID}\r\n}\r\nexport const unfollow = (userID: number):UnFollowACType => {\r\n    return{type: 'UNFOLLOW', userID}\r\n}\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return{type:'USERS', users}\r\n}\r\nexport const setTotalUserCount = (pageNumber: number): setTotalUserCountACType => {\r\n    return{type: 'SET_TOTAL_USER_COUNT', pageNumber: pageNumber}\r\n}\r\nexport const setIsFetching = (isFetching: boolean):setToggleIsFetchingType => {\r\n    return{type: 'TOGGLE_IS_FETCHING', isFetching: isFetching }\r\n}\r\nexport type setToggleIsFetchingType = {\r\n    type: 'TOGGLE_IS_FETCHING'\r\n    isFetching: boolean\r\n}\r\nexport type SetUSerACType = {\r\n    type: 'USERS'\r\n    users: Array<UserType>\r\n}\r\nexport type FollowACType = {\r\n    type: 'FOLLOW'\r\n    userID: number\r\n}\r\nexport type UnFollowACType = {\r\n    type: 'UNFOLLOW'\r\n    userID: number\r\n}\r\nexport type SetCurrentPageACType =  {\r\n    type:'SET_CURRENT_PAGE'\r\n    currentPage: number\r\n}\r\nexport type setTotalUserCountACType = {\r\n    type: 'SET_TOTAL_USER_COUNT'\r\n    pageNumber: number\r\n}\r\ntype UserReducerActionType = FollowACType  |  UnFollowACType | SetUSerACType | SetCurrentPageACType | setTotalUserCountACType | setToggleIsFetchingType;",["139","140"],"C:\\SocialNetwork\\Network\\src\\Components\\Users\\userContainer.tsx",[],["141","142"],"C:\\SocialNetwork\\Network\\src\\Components\\Users\\Users.tsx",["143"],"import {UserType} from \"../Redux/userReduser\";\r\nimport s from \"./userContainer.module.css\";\r\nimport userPhoto from \"../../Assepts/images/ava.png\";\r\nimport React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    currentPage: number\r\n    users: Array<UserType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\nconst Users = (props: UsersPropsType) => {\r\n\r\n\r\n    let pageCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages = []\r\n\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return <div>\r\n        {pages.map(p => {\r\n\r\n            return <span\r\n                onClick={() => {\r\n                    props.onPageChanged(p)\r\n                }}\r\n                className={props.currentPage === p ? s.selectedPage : ''}>{p}</span>\r\n\r\n        })}\r\n\r\n\r\n        {props.users.map(user => {\r\n            return (\r\n                <div key={user.id}>\r\n               <span>\r\n                   <div>\r\n                       <NavLink to={\"/profile/\" + user.id}>\r\n                       <img className={s.img} src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                            alt=\"image\"/>\r\n                       </NavLink>\r\n                   </div>\r\n                   <div>\r\n                       {user.followed\r\n                           ? <button onClick={() => {\r\n                               props.unfollow(user.id)\r\n                           }\r\n                           }>Follow</button>\r\n                           : <button onClick={() => {\r\n                               props.follow(user.id)\r\n                           }\r\n                           }>Unfollow</button>}\r\n\r\n                   </div>\r\n               </span>\r\n                    <span>\r\n                   <span>\r\n                       <div>{user.name}</div>\r\n                       <div>{user.status}</div>\r\n                   </span>\r\n                   <span>\r\n                       <div>{'user.location.country'}</div>\r\n                       <div>{'user.location.city'}</div>\r\n\r\n                   </span>\r\n               </span>\r\n                </div>\r\n            )\r\n        })}\r\n    </div>\r\n}\r\nexport default Users","C:\\SocialNetwork\\Network\\src\\Components\\Common\\Preloader\\Preloader.tsx",[],"C:\\SocialNetwork\\Network\\src\\Components\\Profile\\ProfileContainer.tsx",[],"C:\\SocialNetwork\\Network\\src\\Components\\Redux\\auth-Reducer.tsx",["144"],"C:\\SocialNetwork\\Network\\src\\Components\\Header\\HeaderContainer.tsx",[],{"ruleId":"145","severity":1,"message":"146","line":5,"column":8,"nodeType":"147","messageId":"148","endLine":5,"endColumn":15},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"149","replacedBy":"153"},{"ruleId":"151","replacedBy":"154"},{"ruleId":"149","replacedBy":"155"},{"ruleId":"151","replacedBy":"156"},{"ruleId":"149","replacedBy":"157"},{"ruleId":"151","replacedBy":"158"},{"ruleId":"149","replacedBy":"159"},{"ruleId":"151","replacedBy":"160"},{"ruleId":"149","replacedBy":"161"},{"ruleId":"151","replacedBy":"162"},{"ruleId":"145","severity":1,"message":"163","line":3,"column":9,"nodeType":"147","messageId":"148","endLine":3,"endColumn":24},{"ruleId":"145","severity":1,"message":"164","line":1,"column":8,"nodeType":"147","messageId":"148","endLine":1,"endColumn":13},{"ruleId":"145","severity":1,"message":"165","line":1,"column":16,"nodeType":"147","messageId":"148","endLine":1,"endColumn":25},{"ruleId":"145","severity":1,"message":"166","line":4,"column":9,"nodeType":"147","messageId":"148","endLine":4,"endColumn":19},{"ruleId":"167","severity":1,"message":"168","line":14,"column":17,"nodeType":"169","endLine":15,"endColumn":35},{"ruleId":"149","replacedBy":"170"},{"ruleId":"151","replacedBy":"171"},{"ruleId":"145","severity":1,"message":"164","line":1,"column":8,"nodeType":"147","messageId":"148","endLine":1,"endColumn":13},{"ruleId":"145","severity":1,"message":"164","line":1,"column":8,"nodeType":"147","messageId":"148","endLine":1,"endColumn":13},{"ruleId":"172","severity":1,"message":"173","line":41,"column":9,"nodeType":"174","messageId":"175","endLine":41,"endColumn":15},{"ruleId":"172","severity":1,"message":"173","line":54,"column":9,"nodeType":"174","messageId":"175","endLine":54,"endColumn":15},{"ruleId":"149","replacedBy":"176"},{"ruleId":"151","replacedBy":"177"},{"ruleId":"149","replacedBy":"178"},{"ruleId":"151","replacedBy":"179"},{"ruleId":"167","severity":1,"message":"168","line":43,"column":24,"nodeType":"169","endLine":44,"endColumn":42},{"ruleId":"145","severity":1,"message":"164","line":1,"column":8,"nodeType":"147","messageId":"148","endLine":1,"endColumn":13},"@typescript-eslint/no-unused-vars","'Profile' is defined but never used.","Identifier","unusedVar","no-native-reassign",["180"],"no-negated-in-lhs",["181"],["180"],["181"],["180"],["181"],["180"],["181"],["180"],["181"],["180"],["181"],"'MapStateToProps' is defined but never used.","'React' is defined but never used.","'ReactNode' is defined but never used.","'DataACType' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["180"],["181"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode",["180"],["181"],["180"],["181"],"no-global-assign","no-unsafe-negation"]