[{"C:\\SocialNetwork\\Network\\src\\App.tsx":"1","C:\\SocialNetwork\\Network\\src\\Components\\Navbar\\Navbar.tsx":"2","C:\\SocialNetwork\\Network\\src\\Components\\Profile\\MyPosts\\MyPosts.tsx":"3","C:\\SocialNetwork\\Network\\src\\Components\\Profile\\Profile.tsx":"4","C:\\SocialNetwork\\Network\\src\\index.tsx":"5","C:\\SocialNetwork\\Network\\src\\Components\\Profile\\MyPosts\\Post\\Posts.tsx":"6","C:\\SocialNetwork\\Network\\src\\Components\\Dialogs\\Dialogs.tsx":"7","C:\\SocialNetwork\\Network\\src\\reportWebVitals.ts":"8","C:\\SocialNetwork\\Network\\src\\Components\\Dialogs\\Dialog\\Dialog.tsx":"9","C:\\SocialNetwork\\Network\\src\\Components\\Dialogs\\Message\\Message.tsx":"10","C:\\SocialNetwork\\Network\\src\\Components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"11","C:\\SocialNetwork\\Network\\src\\Components\\Redux\\State.tsx":"12","C:\\SocialNetwork\\Network\\src\\Components\\Header\\Header.tsx":"13","C:\\SocialNetwork\\Network\\src\\Components\\Redux\\dialogReducer.tsx":"14","C:\\SocialNetwork\\Network\\src\\Components\\Redux\\profileReducer.tsx":"15","C:\\SocialNetwork\\Network\\src\\Components\\Redux\\redux-store.tsx":"16","C:\\SocialNetwork\\Network\\src\\Components\\Dialogs\\DialogsContainer.tsx":"17","C:\\SocialNetwork\\Network\\src\\Components\\Profile\\MyPosts\\MyPostContainer.tsx":"18","C:\\SocialNetwork\\Network\\src\\Components\\Redux\\userReduser.tsx":"19","C:\\SocialNetwork\\Network\\src\\Components\\Users\\userContainer.tsx":"20","C:\\SocialNetwork\\Network\\src\\Components\\Users\\Users.tsx":"21","C:\\SocialNetwork\\Network\\src\\Components\\Common\\Preloader\\Preloader.tsx":"22"},{"size":992,"mtime":1611766614095,"results":"23","hashOfConfig":"24"},{"size":805,"mtime":1609023244384,"results":"25","hashOfConfig":"24"},{"size":1233,"mtime":1611333263709,"results":"26","hashOfConfig":"24"},{"size":351,"mtime":1611387115275,"results":"27","hashOfConfig":"24"},{"size":321,"mtime":1611387862682,"results":"28","hashOfConfig":"24"},{"size":508,"mtime":1609014789405,"results":"29","hashOfConfig":"24"},{"size":1398,"mtime":1610603226397,"results":"30","hashOfConfig":"24"},{"size":425,"mtime":1606123191738,"results":"31","hashOfConfig":"24"},{"size":350,"mtime":1609583310028,"results":"32","hashOfConfig":"24"},{"size":194,"mtime":1609593623262,"results":"33","hashOfConfig":"24"},{"size":510,"mtime":1609587100147,"results":"34","hashOfConfig":"24"},{"size":3221,"mtime":1610426635375,"results":"35","hashOfConfig":"24"},{"size":354,"mtime":1608938888392,"results":"36","hashOfConfig":"24"},{"size":1417,"mtime":1611663361364,"results":"37","hashOfConfig":"24"},{"size":1162,"mtime":1611663361365,"results":"38","hashOfConfig":"24"},{"size":295,"mtime":1610436997295,"results":"39","hashOfConfig":"24"},{"size":1456,"mtime":1611327996868,"results":"40","hashOfConfig":"24"},{"size":1296,"mtime":1611765045488,"results":"41","hashOfConfig":"24"},{"size":3289,"mtime":1613921180494,"results":"42","hashOfConfig":"24"},{"size":3278,"mtime":1613927926515,"results":"43","hashOfConfig":"24"},{"size":2212,"mtime":1613917347174,"results":"44","hashOfConfig":"24"},{"size":411,"mtime":1613923145900,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1btcow1",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\SocialNetwork\\Network\\src\\App.tsx",[],["99","100"],"C:\\SocialNetwork\\Network\\src\\Components\\Navbar\\Navbar.tsx",[],"C:\\SocialNetwork\\Network\\src\\Components\\Profile\\MyPosts\\MyPosts.tsx",[],["101","102"],"C:\\SocialNetwork\\Network\\src\\Components\\Profile\\Profile.tsx",[],"C:\\SocialNetwork\\Network\\src\\index.tsx",[],"C:\\SocialNetwork\\Network\\src\\Components\\Profile\\MyPosts\\Post\\Posts.tsx",[],"C:\\SocialNetwork\\Network\\src\\Components\\Dialogs\\Dialogs.tsx",[],["103","104"],"C:\\SocialNetwork\\Network\\src\\reportWebVitals.ts",[],"C:\\SocialNetwork\\Network\\src\\Components\\Dialogs\\Dialog\\Dialog.tsx",[],"C:\\SocialNetwork\\Network\\src\\Components\\Dialogs\\Message\\Message.tsx",[],["105","106"],"C:\\SocialNetwork\\Network\\src\\Components\\Profile\\ProfileInfo\\ProfileInfo.tsx",[],"C:\\SocialNetwork\\Network\\src\\Components\\Redux\\State.tsx",["107"],"C:\\SocialNetwork\\Network\\src\\Components\\Header\\Header.tsx",["108"],"import React from \"react\";\r\nimport s from './Header.module.css'\r\nconst Header = () => {\r\n    return (\r\n\r\n            <header className={s.Header}>\r\n                <img src=\"https://w-dog.ru/wallpapers/5/9/288879431917547/polyarnaya-sova-belaya-sova-ptica.jpg\"\r\n                     alt=\"image\"/>\r\n            </header>\r\n\r\n    )\r\n}\r\nexport default Header","C:\\SocialNetwork\\Network\\src\\Components\\Redux\\dialogReducer.tsx",[],"C:\\SocialNetwork\\Network\\src\\Components\\Redux\\profileReducer.tsx",[],"C:\\SocialNetwork\\Network\\src\\Components\\Redux\\redux-store.tsx",[],"C:\\SocialNetwork\\Network\\src\\Components\\Dialogs\\DialogsContainer.tsx",["109"],"import React from \"react\";\r\nimport {addMessageAC, changeMessageTextAC} from \"../Redux/dialogReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {DialogType, DispatchAddMessageType, DispatchChangeMessageType, MessageType, StateType} from \"../Redux/State\";\r\nimport {connect} from \"react-redux\";\r\ntype AddMessagesType = (addMessageAC: DispatchAddMessageType) => void\r\ntype ChangeMessagesType = (changeMessageTextAC: DispatchChangeMessageType) => void\r\ntype allDispatchDialogType = AddMessagesType & ChangeMessagesType\r\n\r\ntype MapDispatchToPropsType = {\r\n    addMessage: () => void\r\n    changeMessageText: (text: string) => void\r\n}\r\ntype MapStateToPropsType = {\r\n    dialogs:  Array<DialogType>\r\n    messages: Array<MessageType>\r\n    newMessageText: string\r\n\r\n}\r\nconst mapStateToProps = (state:StateType ): MapStateToPropsType => {\r\n    return{\r\n        dialogs: state.dialogPage.dialogData,\r\n        messages: state.dialogPage.messageData,\r\n        newMessageText: state.dialogPage.newMessageText,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: allDispatchDialogType ): MapDispatchToPropsType => {\r\n    return{\r\n        addMessage: () => {\r\n            dispatch(addMessageAC())\r\n        },\r\n        changeMessageText: (text: string) => {\r\n            dispatch(changeMessageTextAC(text))\r\n        }\r\n    }\r\n}\r\nexport const DialogContainer = connect<MapStateToPropsType,MapDispatchToPropsType, {}, StateType>(mapStateToProps, mapDispatchToProps)(Dialogs);\r\n\r\n",["110","111"],"C:\\SocialNetwork\\Network\\src\\Components\\Profile\\MyPosts\\MyPostContainer.tsx",["112"],"import React from \"react\";\r\nimport {addPostAC, changePostTextAC} from \"../../Redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {DispatchAddPostType, DispatchChangePostType, PostType, StateType} from \"../../Redux/State\";\r\n\r\ntype dispatchAddPostType = (addPostAC: DispatchAddPostType) => void\r\ntype dispatchUpdateNewPostType = (changePostTextAC:  DispatchChangePostType) => void\r\ntype dispatchAllType = dispatchAddPostType & dispatchUpdateNewPostType\r\ntype MapDispatchToPropsType = {\r\n    updateNewPostText: (text: string) => void\r\n    addPost: () => void\r\n}\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostType>\r\n    newPost: string\r\n}\r\n\r\nconst mapStateToProps = (state: StateType):MapStateToPropsType => {\r\nreturn {\r\n    posts: state.profilePage.postData,\r\n    newPost: state.profilePage.newPost\r\n}\r\n}\r\nconst mapDispatchToProps = (dispatch: dispatchAllType):MapDispatchToPropsType => {\r\n    return{\r\n        updateNewPostText:  (text: string) => {\r\n\r\n            dispatch(changePostTextAC(text))\r\n        },\r\n        addPost: () => {\r\n            dispatch(addPostAC())\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const PostContainer = connect<MapStateToPropsType,MapDispatchToPropsType, {}, StateType >(mapStateToProps, mapDispatchToProps)(MyPosts)","C:\\SocialNetwork\\Network\\src\\Components\\Redux\\userReduser.tsx",["113","114"],"\r\nexport type UsersType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n}\r\nexport type UserType = {\r\n    id: number\r\n    followed: boolean,\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n    photos: string\r\n}\r\ntype LocationType = {\r\n    city: string\r\n    country: string\r\n}\r\nlet initialState: UsersType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true\r\n}\r\nexport const userReducer = (state = initialState, action:UserReducerActionType) => {\r\n    switch (action.type) {\r\n\r\n        case 'FOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if(user.id === action.userID){\r\n                        return {...user, followed: true}\r\n                    }\r\n                    return user\r\n                } )\r\n            }\r\n        break;\r\n        }\r\n        case 'UNFOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if(user.id === action.userID){\r\n                        return{...user, followed: false}\r\n                    }\r\n                    return user\r\n                })\r\n            }\r\n\r\n        break;\r\n        }\r\n        case 'USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'SET_CURRENT_PAGE':{\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case \"SET_TOTAL_USER_COUNT\":{\r\n            return {...state, totalUsersCount: action.pageNumber}\r\n        }\r\n        case \"TOGGLE_IS_FETCHING\":{\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n\r\n        default :{\r\n                return state\r\n            }\r\n    }\r\n}\r\nexport const setCurrentPageAC = (currentPage: number):SetCurrentPageACType => {\r\n    return {type: 'SET_CURRENT_PAGE', currentPage: currentPage}\r\n}\r\nexport const followAC = (userID: number):FollowACType => {\r\n    return{type: 'FOLLOW', userID}\r\n}\r\nexport const unfollowAC = (userID: number):UnFollowACType => {\r\n    return{type: 'UNFOLLOW', userID}\r\n}\r\nexport const setUsersAC = (users: Array<UserType>) => {\r\n    return{type:'USERS', users}\r\n}\r\nexport const setTotalUserCountAC = (pageNumber: number): setTotalUserCountACType => {\r\n    return{type: 'SET_TOTAL_USER_COUNT', pageNumber: pageNumber}\r\n}\r\nexport const setToggleIsFetchingAC = (isFetching: boolean):setToggleIsFetchingType => {\r\n    return{type: 'TOGGLE_IS_FETCHING', isFetching: isFetching }\r\n}\r\nexport type setToggleIsFetchingType = {\r\n    type: 'TOGGLE_IS_FETCHING'\r\n    isFetching: boolean\r\n}\r\nexport type SetUSerACType = {\r\n    type: 'USERS'\r\n    users: Array<UserType>\r\n}\r\nexport type FollowACType = {\r\n    type: 'FOLLOW'\r\n    userID: number\r\n}\r\nexport type UnFollowACType = {\r\n    type: 'UNFOLLOW'\r\n    userID: number\r\n}\r\nexport type SetCurrentPageACType =  {\r\n    type:'SET_CURRENT_PAGE'\r\n    currentPage: number\r\n}\r\nexport type setTotalUserCountACType = {\r\n    type: 'SET_TOTAL_USER_COUNT'\r\n    pageNumber: number\r\n}\r\ntype UserReducerActionType = FollowACType  |  UnFollowACType | SetUSerACType | SetCurrentPageACType | setTotalUserCountACType | setToggleIsFetchingType;","C:\\SocialNetwork\\Network\\src\\Components\\Users\\userContainer.tsx",[],"C:\\SocialNetwork\\Network\\src\\Components\\Users\\Users.tsx",["115"],"C:\\SocialNetwork\\Network\\src\\Components\\Common\\Preloader\\Preloader.tsx",[],{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"116","replacedBy":"120"},{"ruleId":"118","replacedBy":"121"},{"ruleId":"116","replacedBy":"122"},{"ruleId":"118","replacedBy":"123"},{"ruleId":"116","replacedBy":"124"},{"ruleId":"118","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":1,"column":8,"nodeType":"128","messageId":"129","endLine":1,"endColumn":13},{"ruleId":"130","severity":1,"message":"131","line":7,"column":17,"nodeType":"132","endLine":8,"endColumn":35},{"ruleId":"126","severity":1,"message":"127","line":1,"column":8,"nodeType":"128","messageId":"129","endLine":1,"endColumn":13},{"ruleId":"116","replacedBy":"133"},{"ruleId":"118","replacedBy":"134"},{"ruleId":"126","severity":1,"message":"127","line":1,"column":8,"nodeType":"128","messageId":"129","endLine":1,"endColumn":13},{"ruleId":"135","severity":1,"message":"136","line":41,"column":9,"nodeType":"137","messageId":"138","endLine":41,"endColumn":15},{"ruleId":"135","severity":1,"message":"136","line":54,"column":9,"nodeType":"137","messageId":"138","endLine":54,"endColumn":15},{"ruleId":"130","severity":1,"message":"131","line":41,"column":24,"nodeType":"132","endLine":42,"endColumn":42},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],["139"],["140"],["139"],["140"],["139"],["140"],"@typescript-eslint/no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["139"],["140"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","no-global-assign","no-unsafe-negation"]